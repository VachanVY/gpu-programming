/*
Generated by Claude Sonnet 4
*/

#ifndef RAND_UTILS_CUH
#define RAND_UTILS_CUH

#include <random>
#include <cstdlib>
#include <ctime>

/**
 * Fill an array with random float values in the range [min_val, max_val]
 * @param arr: Pointer to the array to fill
 * @param size: Number of elements in the array
 * @param min_val: Minimum value for random numbers (default: 0.0f)
 * @param max_val: Maximum value for random numbers (default: 1.0f)
 * @param seed: Random seed (default: current time)
 */
inline void fill_random_float(float *arr, size_t size, float min_val = 0.0f, float max_val = 1.0f, unsigned int seed = 0)
{
    if (seed == 0)
    {
        seed = static_cast<unsigned int>(time(nullptr));
    }

    std::mt19937 gen(seed);
    std::uniform_real_distribution<float> dis(min_val, max_val);

    for (size_t i = 0; i < size; i++)
    {
        arr[i] = dis(gen);
    }
}

/**
 * Fill an array with random integer values in the range [min_val, max_val]
 * @param arr: Pointer to the array to fill
 * @param size: Number of elements in the array
 * @param min_val: Minimum value for random numbers (default: 0)
 * @param max_val: Maximum value for random numbers (default: 100)
 * @param seed: Random seed (default: current time)
 */
inline void fill_random_int(int *arr, size_t size, int min_val = 0, int max_val = 100, unsigned int seed = 0)
{
    if (seed == 0)
    {
        seed = static_cast<unsigned int>(time(nullptr));
    }

    std::mt19937 gen(seed);
    std::uniform_int_distribution<int> dis(min_val, max_val);

    for (size_t i = 0; i < size; i++)
    {
        arr[i] = dis(gen);
    }
}

/**
 * Create and allocate a new float array filled with random values
 * @param size: Number of elements in the array
 * @param min_val: Minimum value for random numbers (default: 0.0f)
 * @param max_val: Maximum value for random numbers (default: 1.0f)
 * @param seed: Random seed (default: current time)
 * @return: Pointer to the allocated and filled array
 * Note: Caller is responsible for freeing the memory with delete[]
 */
inline float *create_random_float_array(size_t size, float min_val = 0.0f, float max_val = 1.0f, unsigned int seed = 0)
{
    float *arr = new float[size];
    fill_random_float(arr, size, min_val, max_val, seed);
    return arr;
}

/**
 * Create and allocate a new int array filled with random values
 * @param size: Number of elements in the array
 * @param min_val: Minimum value for random numbers (default: 0)
 * @param max_val: Maximum value for random numbers (default: 100)
 * @param seed: Random seed (default: current time)
 * @return: Pointer to the allocated and filled array
 * Note: Caller is responsible for freeing the memory with delete[]
 */
inline int *create_random_int_array(size_t size, int min_val = 0, int max_val = 100, unsigned int seed = 0)
{
    int *arr = new int[size];
    fill_random_int(arr, size, min_val, max_val, seed);
    return arr;
}

/**
 * Fill an array with random values using standard normal distribution (mean=0, std=1)
 * @param arr: Pointer to the array to fill
 * @param size: Number of elements in the array
 * @param mean: Mean of the normal distribution (default: 0.0f)
 * @param stddev: Standard deviation of the normal distribution (default: 1.0f)
 * @param seed: Random seed (default: current time)
 */
inline void fill_random_normal(float *arr, size_t size, float mean = 0.0f, float stddev = 1.0f, unsigned int seed = 0)
{
    if (seed == 0)
    {
        seed = static_cast<unsigned int>(time(nullptr));
    }

    std::mt19937 gen(seed);
    std::normal_distribution<float> dis(mean, stddev);

    for (size_t i = 0; i < size; i++)
    {
        arr[i] = dis(gen);
    }
}

/**
 * Simple utility to print a float array (useful for debugging)
 * @param arr: Pointer to the array to print
 * @param size: Number of elements to print
 * @param name: Name/label for the array (optional)
 * @param max_elements: Maximum number of elements to print (default: 10)
 */
inline void print_array(const float *arr, size_t size, const char *name = "Array", size_t max_elements = 10)
{
    printf("%s: [", name);
    size_t print_size = (size > max_elements) ? max_elements : size;

    for (size_t i = 0; i < print_size; i++)
    {
        printf("%.3f", arr[i]);
        if (i < print_size - 1)
            printf(", ");
    }

    if (size > max_elements)
    {
        printf(", ... (%zu more elements)", size - max_elements);
    }
    printf("]\n");
}

/**
 * Simple utility to print an int array (useful for debugging)
 * @param arr: Pointer to the array to print
 * @param size: Number of elements to print
 * @param name: Name/label for the array (optional)
 * @param max_elements: Maximum number of elements to print (default: 10)
 */
inline void print_array(const int *arr, size_t size, const char *name = "Array", size_t max_elements = 10)
{
    printf("%s: [", name);
    size_t print_size = (size > max_elements) ? max_elements : size;

    for (size_t i = 0; i < print_size; i++)
    {
        printf("%d", arr[i]);
        if (i < print_size - 1)
            printf(", ");
    }

    if (size > max_elements)
    {
        printf(", ... (%zu more elements)", size - max_elements);
    }
    printf("]\n");
}

#endif // RAND_UTILS_CUH
